------------------------------------------------------------------------------------------------------------------------------------------------------------
com.bean(package):->
------------------------------------------------------------------------------------------------------------------------------------------------------------


Flight class->

package com.bean;

public class Flight {
	private int flight_id; 
	private String flight_name;
	private String flight_date; 
	private String flight_source;
	private String flight_destination;
	private float flight_price;
	private float flight_duration;
	private int flight_capacity;
	
	public Flight() {
		super();
	}

	public Flight(int flight_id, String flight_name, String flight_date, String flight_source,
			String flight_destination, float flight_price, float flight_duration, int flight_capacity) {
		super();
		this.flight_id = flight_id;
		this.flight_name = flight_name;
		this.flight_date = flight_date;
		this.flight_source = flight_source;
		this.flight_destination = flight_destination;
		this.flight_price = flight_price;
		this.flight_duration = flight_duration;
		this.flight_capacity = flight_capacity;
	}

	public int getFlight_id() {
		return flight_id;
	}

	public void setFlight_id(int flight_id) {
		this.flight_id = flight_id;
	}

	public String getFlight_name() {
		return flight_name;
	}

	public void setFlight_name(String flight_name) {
		this.flight_name = flight_name;
	}

	public String getFlight_date() {
		return flight_date;
	}

	public void setFlight_date(String flight_date) {
		this.flight_date = flight_date;
	}

	public String getFlight_source() {
		return flight_source;
	}

	public void setFlight_source(String flight_source) {
		this.flight_source = flight_source;
	}

	public String getFlight_destination() {
		return flight_destination;
	}

	public void setFlight_destination(String flight_destination) {
		this.flight_destination = flight_destination;
	}

	public float getFlight_price() {
		return flight_price;
	}

	public void setFlight_price(float flight_price) {
		this.flight_price = flight_price;
	}

	public float getFlight_duration() {
		return flight_duration;
	}

	public void setFlight_duration(float flight_duration) {
		this.flight_duration = flight_duration;
	}

	public int getFlight_capacity() {
		return flight_capacity;
	}

	public void setFlight_capacity(int flight_capacity) {
		this.flight_capacity = flight_capacity;
	}

	@Override
	public String toString() {
		return "Flight [flight_id=" + flight_id + ", flight_name=" + flight_name + ", flight_date=" + flight_date
				+ ", flight_source=" + flight_source + ", flight_destination=" + flight_destination + ", flight_price="
				+ flight_price + ", flight_duration=" + flight_duration + ", flight_capacity=" + flight_capacity + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + flight_capacity;
		result = prime * result + ((flight_date == null) ? 0 : flight_date.hashCode());
		result = prime * result + ((flight_destination == null) ? 0 : flight_destination.hashCode());
		result = prime * result + Float.floatToIntBits(flight_duration);
		result = prime * result + flight_id;
		result = prime * result + ((flight_name == null) ? 0 : flight_name.hashCode());
		result = prime * result + Float.floatToIntBits(flight_price);
		result = prime * result + ((flight_source == null) ? 0 : flight_source.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Flight other = (Flight) obj;
		if (flight_capacity != other.flight_capacity)
			return false;
		if (flight_date == null) {
			if (other.flight_date != null)
				return false;
		} else if (!flight_date.equals(other.flight_date))
			return false;
		if (flight_destination == null) {
			if (other.flight_destination != null)
				return false;
		} else if (!flight_destination.equals(other.flight_destination))
			return false;
		if (Float.floatToIntBits(flight_duration) != Float.floatToIntBits(other.flight_duration))
			return false;
		if (flight_id != other.flight_id)
			return false;
		if (flight_name == null) {
			if (other.flight_name != null)
				return false;
		} else if (!flight_name.equals(other.flight_name))
			return false;
		if (Float.floatToIntBits(flight_price) != Float.floatToIntBits(other.flight_price))
			return false;
		if (flight_source == null) {
			if (other.flight_source != null)
				return false;
		} else if (!flight_source.equals(other.flight_source))
			return false;
		return true;
	}
	
	
	
}
--------------------------------------------------------------------------------------------------------
Customer class->

package com.bean;

public class Customer {
	private int customer_id;
	private String customer_name;
	private String customer_username;
	private String customer_password;
	private String customer_email;
	private String custom_phone;
	
	public Customer() {
		super();
	}
	
	

	public Customer(int customer_id, String customer_name, String customer_username, String customer_password,
			String customer_email, String custom_phone) {
		super();
		this.customer_id = customer_id;
		this.customer_name = customer_name;
		this.customer_username = customer_username;
		this.customer_password = customer_password;
		this.customer_email = customer_email;
		this.custom_phone = custom_phone;
	}



	public int getCustomer_id() {
		return customer_id;
	}

	public void setCustomer_id(int customer_id) {
		this.customer_id = customer_id;
	}

	public String getCustomer_name() {
		return customer_name;
	}

	public void setCustomer_name(String customer_name) {
		this.customer_name = customer_name;
	}

	public String getCustomer_username() {
		return customer_username;
	}

	public void setCustomer_username(String customer_username) {
		this.customer_username = customer_username;
	}

	public String getCustomer_password() {
		return customer_password;
	}

	public void setCustomer_password(String customer_password) {
		this.customer_password = customer_password;
	}

	public String getCustomer_email() {
		return customer_email;
	}

	public void setCustomer_email(String customer_email) {
		this.customer_email = customer_email;
	}

	public String getCustom_phone() {
		return custom_phone;
	}

	public void setCustom_phone(String custom_phone) {
		this.custom_phone = custom_phone;
	}

	@Override
	public String toString() {
		return "Customer [customer_id=" + customer_id + ", customer_name=" + customer_name + ", customer_username="
				+ customer_username + ", customer_password=" + customer_password + ", customer_email=" + customer_email
				+ ", custom_phone=" + custom_phone + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((custom_phone == null) ? 0 : custom_phone.hashCode());
		result = prime * result + ((customer_email == null) ? 0 : customer_email.hashCode());
		result = prime * result + customer_id;
		result = prime * result + ((customer_name == null) ? 0 : customer_name.hashCode());
		result = prime * result + ((customer_password == null) ? 0 : customer_password.hashCode());
		result = prime * result + ((customer_username == null) ? 0 : customer_username.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Customer other = (Customer) obj;
		if (custom_phone == null) {
			if (other.custom_phone != null)
				return false;
		} else if (!custom_phone.equals(other.custom_phone))
			return false;
		if (customer_email == null) {
			if (other.customer_email != null)
				return false;
		} else if (!customer_email.equals(other.customer_email))
			return false;
		if (customer_id != other.customer_id)
			return false;
		if (customer_name == null) {
			if (other.customer_name != null)
				return false;
		} else if (!customer_name.equals(other.customer_name))
			return false;
		if (customer_password == null) {
			if (other.customer_password != null)
				return false;
		} else if (!customer_password.equals(other.customer_password))
			return false;
		if (customer_username == null) {
			if (other.customer_username != null)
				return false;
		} else if (!customer_username.equals(other.customer_username))
			return false;
		return true;
	}
	
	
}

---------------------------------------------------------------------------------------------------------------
BookingDetails class->

package com.bean;

public class BookingDetails {
	private int booking_id; 
	private int customer_id;
	private int flight_id;
	private float booking_amount;
	private int seat_number;
	
	public BookingDetails() {
		super();
	}

	public BookingDetails(int booking_id, int customer_id, int flight_id, float booking_amount, int seat_number) {
		super();
		this.booking_id = booking_id;
		this.customer_id = customer_id;
		this.flight_id = flight_id;
		this.booking_amount = booking_amount;
		this.seat_number = seat_number;
	}

	public int getBooking_id() {
		return booking_id;
	}

	public void setBooking_id(int booking_id) {
		this.booking_id = booking_id;
	}

	public int getCustomer_id() {
		return customer_id;
	}

	public void setCustomer_id(int customer_id) {
		this.customer_id = customer_id;
	}

	public int getFlight_id() {
		return flight_id;
	}

	public void setFlight_id(int flight_id) {
		this.flight_id = flight_id;
	}

	public float getBooking_amount() {
		return booking_amount;
	}

	public void setBooking_amount(float booking_amount) {
		this.booking_amount = booking_amount;
	}

	public int getSeat_number() {
		return seat_number;
	}

	public void setSeat_number(int seat_number) {
		this.seat_number = seat_number;
	}

	@Override
	public String toString() {
		return "BookingDetails [booking_id=" + booking_id + ", customer_id=" + customer_id + ", flight_id=" + flight_id
				+ ", booking_amount=" + booking_amount + ", seat_number=" + seat_number + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Float.floatToIntBits(booking_amount);
		result = prime * result + booking_id;
		result = prime * result + customer_id;
		result = prime * result + flight_id;
		result = prime * result + seat_number;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BookingDetails other = (BookingDetails) obj;
		if (Float.floatToIntBits(booking_amount) != Float.floatToIntBits(other.booking_amount))
			return false;
		if (booking_id != other.booking_id)
			return false;
		if (customer_id != other.customer_id)
			return false;
		if (flight_id != other.flight_id)
			return false;
		if (seat_number != other.seat_number)
			return false;
		return true;
	}
	
	
	
}

------------------------------------------------------------------------------------------------------------------------------------------------------------
com.db (package)->
------------------------------------------------------------------------------------------------------------------------------------------------------------


ConnectionManager class->

package com.db;

 

import java.sql.Connection;
import java.sql.DriverManager;

 

public class ConnectionManager {

    public static Connection createConnection() {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

             String url="jdbc:sqlserver://localhost\\SQLEXPRESS;databaseName=Flight1;trustServerCertificate=true;";
             Connection con=DriverManager.getConnection(url, "sa", "password_123");
             return con;
        }catch(Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    public static void closeConnection(Connection con) {
    	try {
    		con.close();
    	}catch(Exception e) {
    		e.printStackTrace();
    	}
    }
	
}

----------------------------------------------------------------------------------------------------------

CustomerDao interface->

package com.db;

import java.sql.Connection;
import java.util.List;

import com.bean.BookingDetails;
import com.bean.Customer;
import com.bean.Flight;

public interface CustomerDao {
	String INSERT_SQL1="insert into Customer values(?,?,?,?,?,?)";
	String INSERT_SQL="insert into Flight values(?,?,?,?,?,?,?,?)";
	String GET_SQL="select * from Customer";
	String GET_ALL_SQL="select * from Flight where flight_id=?";
	
	String GET_SQL1="select * from Booking_details where booking_id=?";
	String GET_ALL_SQL1="select * from Customer";
	String UPDATE_SQL="update Flight where flight_id=?";
    String UPDATE_SQL1="update Customer where customer_id=?";
    String DELETE_SQL="delete from Booking_details where booking_id=?";
    String DELETE_SQL1="delete from Customer where customer_id=?";
    
    String INSERT_SQL2="select * from Flight where flight_date=? AND flight_source=? AND flight_destination=?";
    String INSERT_SQL3="insert into Booking_details values(?,?,?,?)";
    String sql="select * from Booking_details where booking_id = ?";
	
	void addFlight(Connection con , Flight flight);
	boolean deleteFlight(Connection con , int flight);
	boolean updateFlight(Connection con , int flight_id , String choice ,String columnName );
	
	Customer getCustomer(Connection con , int customer);
	boolean addCustomer(Connection con , Customer customer);
	boolean deleteCustomer(Connection con , int customer);
	boolean updateCustomer(Connection con , int customer_id , String choice ,String columnName );
	Flight getFlight(Connection con);
	List<BookingDetails> bookingDetails(Connection con , int id);
}

--------------------------------------------------------------------------------------------------------------------

CustomerDaoImpl class->

package com.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.bean.BookingDetails;
import com.bean.Customer;
import com.bean.Flight;
import com.ui.CustomerInterface;



public class CustomerDaoImpl implements CustomerDao{
	static int flitid;
	static float price;
	
	@Override
	public boolean addCustomer(Connection con , Customer customer) {
		boolean result = false;
		try {
			PreparedStatement st=con.prepareStatement(INSERT_SQL1);

			st.setInt(1, customer.getCustomer_id());
			st.setString(2, customer.getCustomer_name());
			st.setString(3, customer.getCustomer_username());
			st.setString(4, customer.getCustomer_password());
			st.setString(5, customer.getCustomer_email());
			st.setString(6, customer.getCustom_phone());


			int r = st.executeUpdate();
			if (r == 1) {
				result = true;

			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}
	
	
	@Override
	public boolean updateCustomer(Connection con, int customer_id, String choice, String columnName) {
		
		boolean result = false;

		String query = "update Customer set " + columnName + " = ? where customer_id = (?)";
		try {
			PreparedStatement st=con.prepareStatement(query);
			st.setString(1, choice);
			st.setInt(2, customer_id);
			int r = st.executeUpdate();
			if (r == 1) {
				result = true;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}
	
	@Override
	public boolean deleteCustomer(Connection con, int customer) {
		boolean result = false;

		try {
			PreparedStatement st=con.prepareStatement(DELETE_SQL1);
			st.setInt(1, customer);
			int r = st.executeUpdate();
			if (r == 1) {
				result = true;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}
	
	@Override
	public Customer getCustomer(Connection con, int customer) {
		Customer output = new Customer();
		try {
			PreparedStatement st=con.prepareStatement(GET_SQL);
			ResultSet rs = st.executeQuery();

			while (rs.next()) {
				Customer output1 = new Customer(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
						rs.getString(5), rs.getString(6));
				output=output1;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return output;
	}

	@Override
	public void addFlight(Connection con , Flight flight) {
		
		try {
			PreparedStatement st=con.prepareStatement(INSERT_SQL2);

			st.setString(1, flight.getFlight_date());
			st.setString(2, flight.getFlight_source());
			st.setString(3, flight.getFlight_destination());

			ResultSet rs = st.executeQuery();
			while (rs.next()) {
				flitid=rs.getInt(1);
				price=rs.getFloat(6);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		try {
			PreparedStatement st1=con.prepareStatement(INSERT_SQL3);
			Scanner scanner=new Scanner(System.in);
			System.out.println("Enter your customer id:");
			int cust_id=scanner.nextInt();
			System.out.println("Enter your seat number:");
			int seat=scanner.nextInt();
				
			st1.setInt(1, cust_id);
			st1.setInt(2, flitid);
			st1.setFloat(3,price);
			st1.setInt(4, seat);
			
			st1.executeUpdate();
			
			CustomerInterface ai = new CustomerInterface();
			ai.interfaceHandler();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		System.out.println("Flight booked successfully");
	}

	@Override
	public boolean deleteFlight(Connection con , int flight) {
		boolean result = false;

		try {
			PreparedStatement st=con.prepareStatement(DELETE_SQL);
			st.setInt(1, flight);
			int r = st.executeUpdate();
			if (r == 1) {
				result = true;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}

	@Override
	public boolean updateFlight(Connection con , int flight_id , String choice ,String columnName ) {
		
		boolean result = false;

		String query = "update Flight set " + columnName + " = ? where flight_id = (?)";
		try {
			PreparedStatement st=con.prepareStatement(query);
			st.setString(1, choice);
			st.setInt(2, flight_id);
			int r = st.executeUpdate();
			if (r == 1) {
				result = true;
				
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}
	
	public Flight getFlight(Connection con) {
		Flight output =new  Flight();
		try {
			PreparedStatement st=con.prepareStatement(GET_ALL_SQL);
			ResultSet rs = st.executeQuery();

			while (rs.next()) {
				Flight flight = new Flight(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
						rs.getString(5), rs.getFloat(6), rs.getFloat(7), rs.getInt(8));
				output=flight;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return output;
	}
	
	public List<Customer> getAllCustomers(Connection con) {


		List<Customer> ls = new ArrayList<Customer>();
		List<Customer> output = new ArrayList<Customer>();
		try {
			PreparedStatement st=con.prepareStatement(GET_ALL_SQL1);
			ResultSet rs = st.executeQuery();

			while (rs.next()) {
				Customer customer = new Customer(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
						rs.getString(5), rs.getString(6));
				output.add(customer);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return output;
	}
	
	@Override
	public List<BookingDetails> bookingDetails(Connection con , int id) {
		BookingDetails book=new BookingDetails();
		List<BookingDetails> bookList = new ArrayList<BookingDetails>();
		
		try {
			PreparedStatement st=con.prepareStatement(sql);
			st.setInt(1, id);
			ResultSet rs = st.executeQuery();

			while (rs.next()) {
				book.setBooking_id(rs.getInt(1));
				book.setCustomer_id(rs.getInt(2));
				book.setFlight_id(rs.getInt(3));
				book.setBooking_amount(rs.getFloat(4));
				book.setSeat_number(rs.getInt(5));
				bookList.add(book);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return bookList;
	}
	
}

------------------------------------------------------------------------------------------------------

FlightDao interface->

package com.db;

import java.sql.Connection;
import java.util.List;

import com.bean.Flight;

public interface FlightDao {
	
	String INSERT_SQL="insert into Flight values(?,?,?,?,?,?,?,?)";
	String GET_ALL_SQL="select * from Flight";
    String UPDATE_SQL="update Flight where flight_id=?";
    String DELETE_SQL="delete from Flight where flight_id=?";
	
	boolean addFlight(Connection con , Flight flight);
	boolean deleteFlight(Connection con , int flight);
	boolean updateFlight(Connection con , int flight_id , String choice ,String columnName );
	List<Flight> getAllFlights(Connection con);
	
}

--------------------------------------------------------------------------------------------------------

FlightDaoImpl class->

package com.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.bean.Flight;
import com.ui.CustomerInterface;



public class FlightDaoImpl implements FlightDao{

	@Override
	public boolean addFlight(Connection con , Flight flight) {
		boolean result = false;
		try {
			PreparedStatement st=con.prepareStatement(INSERT_SQL);
			st.setInt(1, flight.getFlight_id());
			st.setString(2, flight.getFlight_name());
			st.setString(3, flight.getFlight_date());
			st.setString(4, flight.getFlight_source());
			st.setString(5, flight.getFlight_destination());
			st.setFloat(6, flight.getFlight_price());
			st.setFloat(7, flight.getFlight_duration());
			st.setInt(8, flight.getFlight_capacity());

			int r = st.executeUpdate();
			if (r == 1) {
				result = true;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}

	@Override
	public boolean deleteFlight(Connection con , int flight) {
		boolean result = false;

		try {
			PreparedStatement st=con.prepareStatement(DELETE_SQL);
			st.setInt(1, flight);
			int r = st.executeUpdate();
			if (r == 1) {
				result = true;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}

	@Override
	public boolean updateFlight(Connection con , int flight_id , String choice ,String columnName ) {
		
		boolean result = false;

		String query = "update Flight set " + columnName + " = ? where flight_id = (?)";
		try {
			PreparedStatement st=con.prepareStatement(query);
			st.setString(1, choice);
			st.setInt(2, flight_id);
			int r = st.executeUpdate();
			if (r == 1) {
				result = true;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			result = false;
		}

		return result;
	}

	@Override
	public List<Flight> getAllFlights(Connection con) {


		List<Flight> ls = new ArrayList<Flight>();
		List<Flight> output = new ArrayList<Flight>();
		try {
			PreparedStatement st=con.prepareStatement(GET_ALL_SQL);
			ResultSet rs = st.executeQuery();

			while (rs.next()) {
				Flight flight = new Flight(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4),
						rs.getString(5), rs.getFloat(6), rs.getFloat(7), rs.getInt(8));
				output.add(flight);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return output;

	}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------
com.ui(package)->
------------------------------------------------------------------------------------------------------------------------------------------------------------
Action class->

package com.ui;

public abstract class Action {
	public abstract void init();
	public abstract void execute();
	public final void go() {
		init();
		execute();
	}

}

----------------------------------------------------------------------------------------------------
AddCustomerAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.bean.Customer;
import com.bean.Flight;
import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;

public class AddCustomerAction extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Adding Customer");
		System.out.println("-----------------------------");
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Customer cst = new Customer();
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter Customer id");
		cst.setCustomer_id(sc.nextInt());
		System.out.println("Enter Customer name");
		cst.setCustomer_name(sc.next());
		System.out.println("Enter username");
		cst.setCustomer_username(sc.next());
		System.out.println("Enter password");
		cst.setCustomer_password(sc.next());
		System.out.println("Enter email");
		cst.setCustomer_email(sc.next());
		System.out.println("Enter Phone number");
		cst.setCustom_phone(sc.next());
		
		int id=cst.getCustomer_id();
		
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		CustomerInterface ai = new CustomerInterface();
		
		if (impl.addCustomer(con, cst) == true) {
//			impl.insertId(con, id);
			System.out.println("Customer added");
			ai.interfaceHandler();
		}
		
		else {
			System.out.println("Customer not added");
			ai.interfaceHandler();
		}
	}
}

--------------------------------------------------------------------------------------------------------
AddFlightAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.bean.Flight;
import com.db.ConnectionManager;
import com.db.FlightDaoImpl;

public class AddFlightAction extends Action
{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Adding Flight");
		System.out.println("-----------------------------");
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Flight flt = new Flight();
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter flight id");
		flt.setFlight_id(sc.nextInt());
		System.out.println("Enter flight name");
		flt.setFlight_name(sc.next());
		System.out.println("Enter date");
		flt.setFlight_date(sc.next());
		System.out.println("Enter source");
		flt.setFlight_source(sc.next());
		System.out.println("Enter destination");
		flt.setFlight_destination(sc.next());
		System.out.println("Enter price");
		flt.setFlight_price(sc.nextFloat());
		System.out.println("Enter duration");
		flt.setFlight_duration(sc.nextFloat());
		System.out.println("Enter seat capacity");
		flt.setFlight_capacity(sc.nextInt());
		
		Connection con = ConnectionManager.createConnection();
		FlightDaoImpl impl = new FlightDaoImpl();
		AdminInterface ai = new AdminInterface();
		
		if (impl.addFlight(con, flt) == true) {
			System.out.println("Flight Table Created");
			ai.interfaceHandler();
		}
		
		else {
			System.out.println("Flight Table not created");
			ai.interfaceHandler();
		}
	}

}

-------------------------------------------------------------------------------------------------
AddFlightActionCustomer class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.bean.Flight;
import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;


public class AddFlightActionCustomer extends Action
{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Adding Flight");
		System.out.println("-----------------------------");
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Flight flt = new Flight();
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter date");
		flt.setFlight_date(sc.next());
		System.out.println("Enter source");
		flt.setFlight_source(sc.next());
		System.out.println("Enter destination");
		flt.setFlight_destination(sc.next());
		
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		
		impl.addFlight(con, flt);
			
		
	}

}

-------------------------------------------------------------------------------------------------
AdminCredential class->

package com.ui;

import java.beans.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;


public class AdminCredential extends credentials{
	
	public  void credentialCheck() throws SQLException {

		
		java.sql.Statement st = con.createStatement();
		ResultSet rs = st.executeQuery("select * from Admin");
		
	
		System.out.println("enter id");
		id = scan.nextInt();
		
		System.out.println("enter username");
		 name = scan.next();
		 
		System.out.println("enter password");
		 pass = scan.next();
		
		while(rs.next()) {
			
			int admin_id = rs.getInt("admin_id");
			String username =rs.getString("name");	
			String password =rs.getString("password");
			
			
			if(admin_id == id && username.equals(name)  && password.equals(pass)) {
				AdminInterface admin = new AdminInterface();
				admin.interfaceHandler();
			}
			
		}
		System.out.println("invalid credential");
		credentialCheck();
		
	}
	

}

---------------------------------------------------------------------------------------------------
AdminInterface class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;

public class AdminInterface {
	public void display() {
		String[] mainMenu = { "1. Add Flight ", "2. Delete Flight", "3. Update Flight", "4. Get all Flights", 
				"5. Get all Customers", "6. Customer section", "0. Exit"};
		for (int i = 0; i < mainMenu.length; i++) {
			System.out.println(mainMenu[i]);
		}

	}

	public int choice() {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter your Choice");
		int choice = sc.nextInt();
		return choice;
	}

	public void interfaceHandler() {
		Connection con = ConnectionManager.createConnection();
		ConnectionManager.closeConnection(con);
		while (true) {
			display();
			int choice = this.choice();
			switch (choice) {

			case 1:
				Action act1 = new AddFlightAction();
				while (true) {
					act1.init();
					act1.execute();
				}

			case 2:
				Action act2 = new DeleteFlightAction();
				while (true) {
					act2.init();
					act2.execute();
				}

			case 3:
				Action act3 = new UpdateFlightAction();
				while (true) {
					act3.init();
					act3.execute();
				}

			case 4:
				Action act4 = new GetAllFlightAction();
				while (true) {
					act4.init();
					act4.execute();

				}
				
			case 5:
				Action act5 = new GetAllCustomerAction();
				while (true) {
					act5.init();
					act5.execute();

				}
			
			case 6:
				while (true) {
					CustomerInterface cust=new CustomerInterface();
					cust.interfaceHandler();
				}
				
			case 0:
				MenuHandler menu=new MenuHandler();
				menu.handleMenu();
				
			default:
				System.out.println("invalid Choice");

			}
		}
	}
}


---------------------------------------------------------------------------------------------------------
credentials class->

package com.ui;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Scanner;

import com.db.ConnectionManager;


public abstract class credentials {
	
	int id;
	String name;
	String pass;
	ConnectionManager connectionManager = new ConnectionManager();
	Connection con = connectionManager.createConnection();
	Scanner scan = new Scanner(System.in);
	abstract public void credentialCheck() throws SQLException;

}

------------------------------------------------------------------------------------------------------------
CustomerInterface class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;

public class CustomerInterface {
	public void display() {
		String[] mainMenu = { "1. Register ", "2. Reset Password", "3. Update Datails", "4. Delete Account ",
				"5. Book Ticket", "6. Cancel Ticket ", "7. Update Ticket Datails", "8. Get Booking Details", "0. Exit" };
		for (int i = 0; i < mainMenu.length; i++) {
			System.out.println(mainMenu[i]);
		}

	}

	public int choice() {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter your Choice");
		int choice = sc.nextInt();
		return choice;
	}

	public void interfaceHandler() {
		Connection con = ConnectionManager.createConnection();
		ConnectionManager.closeConnection(con);
		while (true) {
			display();
			int choice = this.choice();
			switch (choice) {
			
			case 1:
				Action act1 = new AddCustomerAction();
				while (true) {
					act1.init();
					act1.execute();
				}

			case 2:
				Action act2 = new UpdateCustomerAction();
				while (true) {
					act2.init();
					act2.execute();
				}

			case 3:
				Action act3 = new UpdateCustomerAction();
				while (true) {
					act3.init();
					act3.execute();
				}

			case 4:
				Action act4 = new DeleteCustomerAction();
				while (true) {
					act4.init();
					act4.execute();

				}

			case 5:
				Action act5 = new AddFlightActionCustomer();
				while (true) {
					act5.init();
					act5.execute();
				}

			case 6:
				Action act6 = new DeleteFlightActionCustomer();
				while (true) {
					act6.init();
					act6.execute();
				}

			case 7:
				Action act7 = new UpdateFlightActionCustomer();
				while (true) {
					act7.init();
					act7.execute();
				}

			case 8:
				Action act8 = new GetBookingDetailsAction();
				while (true) {
					act8.init();
					act8.execute();

				}
			
			case 0:
				MenuHandler menu=new MenuHandler();
				menu.handleMenu();

			default:
				System.out.println("Invalid Choice");

			}
		}
	}
}

--------------------------------------------------------------------------------------------
DeleteCustomerAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;



public class DeleteCustomerAction extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Deleting Customer");
		System.out.println("----------------------");
		
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Customer Id To Be Deleted");
		int id = sc.nextInt();
		
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		CustomerInterface ad = new CustomerInterface();
		
		if (impl.deleteCustomer(con, id) == true) {
			System.out.println("Customer account deleted");
			ad.interfaceHandler();
		}
		
		else {
			System.out.println("Customer account not deleted");
			ad.interfaceHandler();
		}
	}

}

--------------------------------------------------------------------------------------------------
DeleteFlightAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;
import com.db.FlightDaoImpl;



public class DeleteFlightAction extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Deleting Flight");
		System.out.println("----------------------");
		
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Flight Id To Be Deleted");
		int id = sc.nextInt();
		
		Connection con = ConnectionManager.createConnection();
		FlightDaoImpl impl = new FlightDaoImpl();
		AdminInterface ad = new AdminInterface();
		
		if (impl.deleteFlight(con, id) == true) {
			System.out.println("Flight deleted");
			ad.interfaceHandler();
		}
		
		else {
			System.out.println("Flight not deleted");
			ad.interfaceHandler();
		}
	}

}

--------------------------------------------------------------------------------------
DeleteFlightActionCustomer class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;



public class DeleteFlightActionCustomer extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Cancelling ticket booking");
		System.out.println("----------------------");
		
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Booking Id to cancel booking");
		int id = sc.nextInt();
		
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		CustomerInterface ad = new CustomerInterface();
		
		if (impl.deleteFlight(con, id) == true) {
			System.out.println("Flight deleted");
			ad.interfaceHandler();
		}
		
		else {
			System.out.println("Ticket not cancelled");
			ad.interfaceHandler();
		}
	}

}

------------------------------------------------------------------------------------------------------
GetAllCustomerAction class->

package com.ui;

import java.sql.Connection;
import java.util.List;
import java.util.Scanner;

import com.bean.Customer;
import com.bean.Flight;
import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;



public class GetAllCustomerAction extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Displaying all the Customers");
		System.out.println("----------------------------------");
		
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		
		List<Customer> output = impl.getAllCustomers(con); 
		AdminInterface ad = new AdminInterface();
		
		System.out.println(impl.getAllCustomers(con));
		
		System.out.println("press 0 to go back");
		if(sc.nextInt() == 0) {
			ad.interfaceHandler();
		}
	}

}

------------------------------------------------------------------------------------------------

GetAllFlightAction class->

package com.ui;

import java.sql.Connection;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

import com.bean.Flight;
import com.db.ConnectionManager;
import com.db.FlightDaoImpl;



public class GetAllFlightAction extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Displaying all the flights");
		System.out.println("----------------------------------");
		
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		Connection con = ConnectionManager.createConnection();
		FlightDaoImpl impl = new FlightDaoImpl();
		
		List<Flight> output = impl.getAllFlights(con); 
		AdminInterface ad = new AdminInterface();
//		for(Flight i:output) {
//			System.out.println(i.getFlight_id()+" "+ i.getFlight_name()+" "+i.getFlight_source()+" "+i.getFlight_destination());
//		}
//		
		Iterator<Flight> itr=output.iterator();
		while(itr.hasNext()) {
			Flight flight=itr.next();
			System.out.println(flight.getFlight_name());
		}
		
		
		System.out.println("press 0 to go back");
		if(sc.nextInt() == 0) {
			ad.interfaceHandler();
		}
	}

}

-----------------------------------------------------------------------------------------------------------------

GetBookingDetailsAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;



public class GetBookingDetailsAction extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Getting booking details");
		System.out.println("----------------------");
		
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter Booking Id to get booking details");
		int id = sc.nextInt();
		
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		CustomerInterface ad = new CustomerInterface();
		
		System.out.println(impl.bookingDetails(con, id));
		ConnectionManager.closeConnection(con);
		ad.interfaceHandler();
	}

}

-------------------------------------------------------------------------------------------------

GetFlightAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.bean.Flight;
import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;




public class GetFlightAction extends Action{

	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Displaying flight details");
		System.out.println("----------------------------------");
		
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		
		Flight output = impl.getFlight(con); 
		CustomerInterface ad = new CustomerInterface();
		
		System.out.println(impl.getFlight(con));
		
		System.out.println("press 0 to go back");
		if(sc.nextInt() == 0) {
			ad.interfaceHandler();
		}
	}

}

------------------------------------------------------------------------------------------------
Main class->

package com.ui;

import java.sql.SQLException;


public class Main {

	public static void main(String[] args) throws SQLException {

		MenuHandler menu = new MenuHandler();
		menu.handleMenu();
		
	}

}

---------------------------------------------------------------------------------------------------
MenuHandler class->

package com.ui;

import java.sql.SQLException;
import java.util.Scanner;

public class MenuHandler {
	
	public void display() {
		String[] mainMenu = {
				"1. Admin",
				"2. Customer",
				"0. Exit"
				
			};
		for (int i = 0; i<mainMenu.length; i++){
			System.out.println(mainMenu[i]);
		}
	}
	
	
	public void handleMenu()  {
		while(true) {
			display();
			Scanner menuScanner = new Scanner(System.in);
			System.out.println("Enter Your Choice");
			int choice = menuScanner.nextInt();
			
			switch(choice) {
			
			case 1 : AdminCredential admin = new AdminCredential();
				try {
					admin.credentialCheck();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			break;
				
			case 2: 
				CustomerInterface cust=new CustomerInterface();
				cust.interfaceHandler();
			break;
			
			
			}
		}
	}

}

----------------------------------------------------------------------------------------------
UpdateCustomerAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;


public class UpdateCustomerAction extends Action{

	
	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("updating customer");
		System.out.println("------------------------");
		
	}
	
	
	void display() {
		System.out.println("1. Customer id\n"
				+ "2. Customer name\n"
				+ "3. User name\n"
				+ "4. Password\n"
				+ "5. Email\n"
				+ "6. Phone number\n"
				+ "0. exit");
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("enter the Customer id to update details");
		int id = sc.nextInt();
		display();
		System.out.println("enter the choice,That you want to update");
		int choice = sc.nextInt();
		String update = null ;
		String columnName = null;
		CustomerInterface ad = new CustomerInterface();
		
		switch(choice) {
		case 1:	System.out.println("Enter customer id");
				update = sc.next();
				columnName = "customer_id";
				break;
		
		case 2: System.out.println("Enter customer name");
				update = sc.next();
				columnName = "customer_name";
				break;
		
		case 3: System.out.println("Enter user name");
				update = sc.next();
				columnName = "customer_username";
				break;
				
		case 4: System.out.println("Enter Password");
				update = sc.next();
				columnName = "customer_password";
				break;
				
		case 5: System.out.println("Enter email");
				update = sc.next();
				columnName = "customer_email";
				break;
				
		case 6: System.out.println("Enter phone number");
				update = sc.next();
				columnName = "custom_phone";
				break;
				
		case 0 :ad.interfaceHandler();
				break;
				
		default: System.out.println("invalid choice");
		}

		
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		
		
		if(impl.updateCustomer(con, id,update,columnName) ==  true) {
			System.out.println("Customer details updated");
			ad.interfaceHandler();
		}
		else {
			System.out.println("Details not updated");
		}
	}

}

------------------------------------------------------------------------------------------------
UpdateFlightAction class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;
import com.db.FlightDaoImpl;


public class UpdateFlightAction extends Action{

	
	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("updating flight");
		System.out.println("------------------------");
		
	}
	
	
	void display() {
		System.out.println("1. Flight id\n"
				+ "2. Flight name\n"
				+ "3. Date\n"
				+ "4. Source\n"
				+ "5. Destination\n"
				+ "6. Price\n"
				+ "7. Duration\n"
				+ "8. Capacity\n"
				+ "0. exit");
	}

	@Override
	public void execute() {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		System.out.println("enter the flight id to be updated");
		int id = sc.nextInt();
		display();
		System.out.println("enter the choice,That you want to update");
		int choice = sc.nextInt();
		String update = null ;
		String columnName = null;
		AdminInterface ad = new AdminInterface();
		
		switch(choice) {
		case 1:	System.out.println("Enter flight id");
				update = sc.next();
				columnName = "flight_id";
				break;
		
		case 2: System.out.println("Enter flight name");
				update = sc.next();
				columnName = "flight_name";
				break;
		
		case 3: System.out.println("Enter date");
				update = sc.next();
				columnName = "flight_date";
				break;
				
		case 4: System.out.println("Enter source");
				update = sc.next();
				columnName = "flight_source";
				break;
				
		case 5: System.out.println("Enter destination");
				update = sc.next();
				columnName = "flight_destination";
				break;
				
		case 6: System.out.println("Enter price");
				update = sc.next();
				columnName = "flight_price";
				break;
		
		case 7: System.out.println("Enter duration");
				update = sc.next();
				columnName = "flight_duration";
				break;
				
		case 8: System.out.println("Enter seat capacity");
		update = sc.next();
		columnName = "flight_capacity";
		break;
				
		case 0 :ad.interfaceHandler();
				break;
				
		default: System.out.println("invalid choice");
		}

		
		Connection con = ConnectionManager.createConnection();
		FlightDaoImpl impl = new FlightDaoImpl();
		
		
		if(impl.updateFlight(con, id,update,columnName) ==  true) {
			System.out.println("Flight details updated");
			ad.interfaceHandler();
		}
		else {
			System.out.println("Details not updated");
		}
	}

}

-----------------------------------------------------------------------------------------------------
UpdateFlightActionCustomer class->

package com.ui;

import java.sql.Connection;
import java.util.Scanner;

import com.db.ConnectionManager;
import com.db.CustomerDaoImpl;
import com.db.FlightDaoImpl;


public class UpdateFlightActionCustomer extends Action{

	
	@Override
	public void init() {
		// TODO Auto-generated method stub
		System.out.println("Updating Ticket details");
		System.out.println("------------------------");
		
	}
	
	
	void display() {
		System.out.println( "1. Date\n" + "0. exit");
	}

	@Override
	public void execute() {
		Scanner sc = new Scanner(System.in);
		System.out.println("enter the flight id to be update details");
		int id = sc.nextInt();
		display();
		System.out.println("enter the choice,That you want to update");
		int choice = sc.nextInt();
		String update = null ;
		String columnName = null;
		CustomerInterface ad = new CustomerInterface();
		
		switch(choice) {
		case 1: System.out.println("Enter date");
		update = sc.next();
		columnName = "flight_date";
		break;
				
		case 0 :ad.interfaceHandler();
				break;
				
		default: System.out.println("invalid choice");
		}

		
		Connection con = ConnectionManager.createConnection();
		CustomerDaoImpl impl = new CustomerDaoImpl();
		
		
		if(impl.updateFlight(con, id,update,columnName) ==  true) {
			System.out.println("Flight ticket details updated");
			ad.interfaceHandler();
		}
		else {
			System.out.println("Details not updated");
		}
	}

}

------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------
Create database with name Flight1  ->
Inside this database create 4 tables :->
1) Create a Admin table in the database and store the credentials like admin_id,name,password .
2) Create Flight table.
3) Create Customer table.
4) Create Booking_details table.
(Elements names inside the table should be same as the variables names mentioned in that respective class)
-----------------------------------------------------------------------------------------------------------------------------------------------------------



